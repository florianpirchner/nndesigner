/**
 */
package org.eclipse.athene.nn.model.keras.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.eclipse.athene.nn.model.core.CorePackage;
import org.eclipse.athene.nn.model.core.Design;
import org.eclipse.athene.nn.model.core.util.CoreSwitch;
import org.eclipse.athene.nn.model.keras.KerasFactory;
import org.eclipse.athene.nn.model.keras.KerasPackage;

import org.eclipse.athene.nn.model.keras.util.KerasAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class KerasItemProviderAdapterFactory extends KerasAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(KerasEditPlugin.INSTANCE, KerasPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public KerasItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Tensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TensorItemProvider tensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Tensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTensorAdapter() {
		if (tensorItemProvider == null) {
			tensorItemProvider = new TensorItemProvider(this);
		}

		return tensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Layer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerItemProvider layerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Layer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerAdapter() {
		if (layerItemProvider == null) {
			layerItemProvider = new LayerItemProvider(this);
		}

		return layerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.SingleInputNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleInputNodeItemProvider singleInputNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.SingleInputNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleInputNodeAdapter() {
		if (singleInputNodeItemProvider == null) {
			singleInputNodeItemProvider = new SingleInputNodeItemProvider(this);
		}

		return singleInputNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.MultiInputNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiInputNodeItemProvider multiInputNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.MultiInputNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiInputNodeAdapter() {
		if (multiInputNodeItemProvider == null) {
			multiInputNodeItemProvider = new MultiInputNodeItemProvider(this);
		}

		return multiInputNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.OutputNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputNodeItemProvider outputNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.OutputNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputNodeAdapter() {
		if (outputNodeItemProvider == null) {
			outputNodeItemProvider = new OutputNodeItemProvider(this);
		}

		return outputNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Backend} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BackendItemProvider backendItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Backend}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBackendAdapter() {
		if (backendItemProvider == null) {
			backendItemProvider = new BackendItemProvider(this);
		}

		return backendItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Dense} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DenseItemProvider denseItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Dense}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDenseAdapter() {
		if (denseItemProvider == null) {
			denseItemProvider = new DenseItemProvider(this);
		}

		return denseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Dropout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropoutItemProvider dropoutItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Dropout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropoutAdapter() {
		if (dropoutItemProvider == null) {
			dropoutItemProvider = new DropoutItemProvider(this);
		}

		return dropoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Activation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivationItemProvider activationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Activation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivationAdapter() {
		if (activationItemProvider == null) {
			activationItemProvider = new ActivationItemProvider(this);
		}

		return activationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Reshape} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReshapeItemProvider reshapeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Reshape}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReshapeAdapter() {
		if (reshapeItemProvider == null) {
			reshapeItemProvider = new ReshapeItemProvider(this);
		}

		return reshapeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Flatten} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlattenItemProvider flattenItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Flatten}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlattenAdapter() {
		if (flattenItemProvider == null) {
			flattenItemProvider = new FlattenItemProvider(this);
		}

		return flattenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.Permute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PermuteItemProvider permuteItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.Permute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPermuteAdapter() {
		if (permuteItemProvider == null) {
			permuteItemProvider = new PermuteItemProvider(this);
		}

		return permuteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.RepeatVector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatVectorItemProvider repeatVectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.RepeatVector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatVectorAdapter() {
		if (repeatVectorItemProvider == null) {
			repeatVectorItemProvider = new RepeatVectorItemProvider(this);
		}

		return repeatVectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.athene.nn.model.keras.ActivityRegularization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityRegularizationItemProvider activityRegularizationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.athene.nn.model.keras.ActivityRegularization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityRegularizationAdapter() {
		if (activityRegularizationItemProvider == null) {
			activityRegularizationItemProvider = new ActivityRegularizationItemProvider(this);
		}

		return activityRegularizationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (layerItemProvider != null) layerItemProvider.dispose();
		if (singleInputNodeItemProvider != null) singleInputNodeItemProvider.dispose();
		if (multiInputNodeItemProvider != null) multiInputNodeItemProvider.dispose();
		if (outputNodeItemProvider != null) outputNodeItemProvider.dispose();
		if (tensorItemProvider != null) tensorItemProvider.dispose();
		if (backendItemProvider != null) backendItemProvider.dispose();
		if (inputItemProvider != null) inputItemProvider.dispose();
		if (denseItemProvider != null) denseItemProvider.dispose();
		if (dropoutItemProvider != null) dropoutItemProvider.dispose();
		if (activationItemProvider != null) activationItemProvider.dispose();
		if (reshapeItemProvider != null) reshapeItemProvider.dispose();
		if (flattenItemProvider != null) flattenItemProvider.dispose();
		if (permuteItemProvider != null) permuteItemProvider.dispose();
		if (repeatVectorItemProvider != null) repeatVectorItemProvider.dispose();
		if (activityRegularizationItemProvider != null) activityRegularizationItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link CorePackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class CoreChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends CoreSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseDesign(Design object) {
				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createModel()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createLayer()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createInput()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createDense()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createDropout()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createActivation()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createReshape()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createFlatten()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createPermute()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createRepeatVector()));

				newChildDescriptors.add
					(createChildParameter
						(CorePackage.Literals.DESIGN__ELEMENTS,
						 KerasFactory.eINSTANCE.createActivityRegularization()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return KerasEditPlugin.INSTANCE;
		}
	}

}
